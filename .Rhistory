plot.curve(1, 4, 0.5, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 2", "lambda_2 = 1", "lambda_2 = 0.5"), col=1:3, lwd=2)
plot.curve(2, 4, 2, 0.5, F, 1, "Various lambda_2, S(t)")
plot.curve(2, 4, 1, 0.5, T, 2)
plot.curve(2, 4, 0.5, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 2", "lambda_2 = 1", "lambda_2 = 0.5"), col=1:3, lwd=2)
plot.curve(3, 4, 2, 0.5, F, 1, "Various lambda_2, f(t)")
plot.curve(3, 4, 1, 0.5, T, 2)
plot.curve(3, 4, 0.5, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 2", "lambda_2 = 1", "lambda_2 = 0.5"), col=1:3, lwd=2)
par(mfrow = c(1, 2))
plot.curve(1, 1, 1, 0.5, F, 1, "Expoential, Lambda(t)")
plot.curve(2, 1, 1, 0.5, F, 1, "Expoential lambda_2, S(t)")
plot.curve(3, 1, 1, 0.5, F, 1, "Expoential lambda_2, f(t)")
par(mfrow = c(1, 2))
plot.curve(1, 4, 2, 0.5, F, 1, "Various lambda_2, Lambda(t)")
plot.curve(1, 4, 1, 0.5, T, 2)
plot.curve(1, 4, 0.5, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 2", "lambda_2 = 1", "lambda_2 = 0.5"), col=1:3, lwd=2)
plot.curve(2, 4, 2, 0.5, F, 1, "Various lambda_2, S(t)")
plot.curve(2, 4, 1, 0.5, T, 2)
plot.curve(2, 4, 0.5, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 2", "lambda_2 = 1", "lambda_2 = 0.5"), col=1:3, lwd=2)
plot.curve(3, 4, 2, 0.5, F, 1, "Various lambda_2, f(t)")
plot.curve(3, 4, 1, 0.5, T, 2)
plot.curve(3, 4, 0.5, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 2", "lambda_2 = 1", "lambda_2 = 0.5"), col=1:3, lwd=2)
par(mfrow = c(1, 2))
plot.curve(1, 1, 1, 0.5, F, 1, "Expoential, Lambda(t)")
plot.curve(2, 2, 2, 0.5, T, 2)
plot.curve(2, 4, 4, 0.5, T, 3)
plot.curve(2, 1, 1, 0.5, F, 1, "Expoential lambda_2, S(t)")
plot.curve(2, 2, 2, 0.5, T, 2)
plot.curve(2, 4, 4, 0.5, T, 3)
plot.curve(3, 1, 1, 0.5, F, 1, "Expoential lambda_2, f(t)")
plot.curve(3, 2, 2, 0.5, T, 2)
plot.curve(3, 4, 4, 0.5, T, 3)
par(mfrow = c(1, 2))
plot.curve(1, 1, 1, 0.5, F, 1, "Expoential, Lambda(t)")
plot.curve(1, 2, 2, 0.5, T, 2)
plot.curve(1, 4, 4, 0.5, T, 3)
plot.curve(2, 1, 1, 0.5, F, 1, "Expoential lambda_2, S(t)")
plot.curve(2, 2, 2, 0.5, T, 2)
plot.curve(2, 4, 4, 0.5, T, 3)
plot.curve(3, 1, 1, 0.5, F, 1, "Expoential lambda_2, f(t)")
plot.curve(3, 2, 2, 0.5, T, 2)
plot.curve(3, 4, 4, 0.5, T, 3)
par(mfrow = c(1, 2))
plot.curve(1, 1, 8, 0.5, F, 1, "Various lambda_2, Lambda(t)")
plot.curve(1, 1, 4, 0.5, T, 2)
plot.curve(1, 1, 2, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 8", "lambda_2 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
plot.curve(2, 1, 8, 0.5, F, 1, "Various lambda_2, S(t)")
plot.curve(2, 1, 4, 0.5, T, 2)
plot.curve(2, 1, 2, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 8", "lambda_2 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
plot.curve(3, 1, 8, 0.5, F, 1, "Various lambda_2, f(t)")
plot.curve(3, 1, 4, 0.5, T, 2)
plot.curve(3, 1, 2, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 8", "lambda_2 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
par(mfrow = c(1, 2))
plot.curve(1, 2, 4, 0.5, F, 1, "Various lambda_1, Lambda(t)")
plot.curve(1, 1, 4, 0.5, T, 2)
plot.curve(1, 0.5, 4, 0.5, T, 3)
legend("topright", legend=c("lambda_1 = 2", "lambda_1 = 1", "lambda_1 = 0.5"), col=1:3, lwd=2)
plot.curve(2, 2, 4, 0.5, F, 1, "Various lambda_2, S(t)")
plot.curve(2, 1, 4, 0.5, T, 2)
plot.curve(2, 0.5, 4, 0.5, T, 3)
legend("topright", legend=c("lambda_1 = 2", "lambda_1 = 1", "lambda_1 = 0.5"), col=1:3, lwd=2)
plot.curve(3, 2, 4, 0.5, F, 1, "Various lambda_2, f(t)")
plot.curve(3, 1, 4, 0.5, T, 2)
plot.curve(3, 0.5, 4, 0.5, T, 3)
legend("topright", legend=c("lambda_1 = 2", "lambda_1 = 1", "lambda_1 = 0.5"), col=1:3, lwd=2)
par(mfrow = c(1, 2))
plot.curve(1, 1, 4, 0.5, F, 1, "Various Tau, Lambda(t)")
plot.curve(1, 1, 4, 1, T, 2)
plot.curve(1, 1, 4, 1.5, T, 3)
legend("topright", legend=c("Tau = 0.5", "Tau =1", "Tau = 1.5"), col=1:3, lwd=2)
plot.curve(2, 1, 4, 0.5, F, 1, "Various Tau, S(t)")
plot.curve(2, 1, 4, 1, T, 2)
plot.curve(2, 1, 4, 1.5, T, 3)
legend("topright", legend=c("Tau = 0.5", "Tau =1", "Tau = 1.5"), col=1:3, lwd=2)
plot.curve(3, 1, 4, 0.5, F, 1, "Various Tau, f(t)")
plot.curve(3, 1, 4, 1, T, 2)
plot.curve(3, 1, 4, 1.5, T, 3)
legend("topright", legend=c("Tau = 0.5", "Tau =1", "Tau = 1.5"), col=1:3, lwd=2)
kidney <- read.csv("D:/MS/Master Course/BST233/Week14/Kidney_data.dat.csv", header = T)
kidney$gender <- as.factor(ifelse(kidney$gender == 1, "male", "female"))
kidney$race <- as.factor(ifelse(kidney$race == 1, "white", "black"))
view()
kidney$gender
library(tidyr)
group1 <- as.vector(point.es[1, ])
library(survival)
fitEx <- survreg(Surv(time = obstime, event = death) ~ gender + race, dist="exponential", data = kidney)
#summary(fitEx)
#exp(coef(fitEx))
getCI.Wald <- function(point, cov, n){
if (n == 2){
var.two <- cov[1] + cov[2] + 2*cov[3]
CI <- c(point[1] + point[2], point[1] + point[2] - 1.96*sqrt(var.two), point[1] + point[2] + 1.96*sqrt(var.two))
}
else {
var.three <- cov[1] + cov[2] + cov[3] + 2*(cov[4] +cov[5 + cov[6]])
CI <- c(point[1] + point[2] + point[3], point[1] + point[2] + point[3] - 1.96*sqrt(var.three), point[1] + point[2] + point[3] + 1.96*sqrt(var.three))
}
return(CI)
}
CI.12 <- getCI.Wald(c(point.es[1,1], point.es[2,1]), c(vcov.es[1,1], vcov.es[2,2], vcov.es[2,1]), 2)
point.es <- cbind(coef(fitEx), confint(fitEx))
vcov.es <- vcov(fitEx)
#vcov.es
gender <- c("male", "male", "female", "female")
race <- c("white", "black", "white", "black")
new.data <- data.frame(cbind(gender, race), stringsAsFactors = F)
new.data
#predict(fitEx, newdata = new.data, interval = "prediction")
CI.12 <- getCI.Wald(c(point.es[1,1], point.es[2,1]), c(vcov.es[1,1], vcov.es[2,2], vcov.es[2,1]), 2)
#CI.12
CI.13 <- getCI.Wald(c(point.es[1,1], point.es[3,1]), c(vcov.es[1,1], vcov.es[3,3], vcov.es[3,1]), 2)
#CI.13
CI.123 <- getCI.Wald(c(point.es[1:3,1]), c(vcov.es[1, 1], vcov.es[2, 2], vcov.es[3, 3],
vcov.es[2, 1], vcov.es[3, 1], vcov.es[3, 2]), 3)
#CI.123
library(tidyr)
group1 <- as.vector(point.es[1, ])
group2 <- CI.12
group3 <- CI.13
group4 <- CI.123
result <- rbind(group1, group2, group3, group4)
result <- as.data.frame(exp(result))
colnames(result) <- c("Point Estimate", "2.5%", "97.5%")
row.names(result) <- t(as.vector(unite(new.data[,1:2])))
kable(result, caption = "Mean and its CI of 4 groups")
library(tidyr)
group1 <- as.vector(point.es[1, ])
group2 <- CI.12
group3 <- CI.13
group4 <- CI.123
result <- rbind(group1, group2, group3, group4)
result <- as.data.frame(exp(result))
colnames(result) <- c("Point Estimate", "2.5%", "97.5%")
row.names(result) <- t(as.vector(unite(new.data[,1:2])))
kable(result, caption = "Mean and its CI of 4 groups")
which(kidney$gender == "male" & kidney$race == "white")
Y_1 <- sum(kidney$obstime[which(kidney$gender == "male" & kidney$race == "white")])
Y_1 <- sum(kidney$obstime[which(kidney$gender == "male" & kidney$race == "white")])
D_1 <- sum(kidney$death[which(kidney$gender == "male" & kidney$race == "white")])
mu_1 <- Y_1/D_1
mu_1
group1 <- c(mu_1, mu_1 - 1.96 * sqrt(var_1), mu_1 + 1.96 * sqrt(var_1))
Y_1 <- sum(kidney$obstime[which(kidney$gender == "male" & kidney$race == "white")])
D_1 <- sum(kidney$death[which(kidney$gender == "male" & kidney$race == "white")])
mu_1 <- Y_1/D_1
var_1 <- mu_1^2/D_1
Y_2 <- sum(kidney$obstime[which(kidney$gender == "male" & kidney$race == "black")])
D_2 <- sum(kidney$death[which(kidney$gender == "male" & kidney$race == "black")])
mu_2 <- Y_2/D_2
var_2 <- mu_2^2/D_2
Y_3 <- sum(kidney$obstime[which(kidney$gender == "female" & kidney$race == "white")])
D_3 <- sum(kidney$death[which(kidney$gender == "female" & kidney$race == "white")])
mu_3 <- Y_3/D_3
var_3 <- mu_3^2/D_3
Y_4 <- sum(kidney$obstime[which(kidney$gender == "female" & kidney$race == "black")])
D_4 <- sum(kidney$death[which(kidney$gender == "female" & kidney$race == "black")])
mu_4 <- Y_4/D_4
var_4 <- mu_4^2/D_4
group1 <- c(mu_1, mu_1 - 1.96 * sqrt(var_1), mu_1 + 1.96 * sqrt(var_1))
group2 <- c(mu_2, mu_2 - 1.96 * sqrt(var_2), mu_2 + 1.96 * sqrt(var_2))
group3 <- c(mu_3, mu_3 - 1.96 * sqrt(var_3), mu_3 + 1.96 * sqrt(var_3))
group4 <- c(mu_4, mu_4 - 1.96 * sqrt(var_4), mu_4 + 1.96 * sqrt(var_4))
result <- rbind(group1, group2, group3, group4)
result <- as.data.frame(result)
colnames(result) <- c("Point Estimate", "2.5%", "97.5%")
row.names(result) <- t(as.vector(unite(new.data[,1:2])))
kable(result, caption = "Mean and its CI of 4 groups")
fitWB <- survreg(Surv(obstime, death) ~ age + gender*race, dist="weibull", data=kidney)
summary(fitWB)
kidney <- read.csv("D:/MS/Master Course/BST233/Week14/Kidney_data.dat.csv", header = T)
View(kidney)
kidney <- read.csv("D:/MS/Master Course/BST233/Week14/Kidney_data.dat.csv", header = T)
kidney$gender <- as.factor(ifelse(kidney$gender == 1, "male", "female"))
kidney$race <- as.factor(ifelse(kidney$race == 1, "white", "black"))
kidney$c_age <- scale(kidney$age, center = T)
kidney <- read.csv("D:/MS/Master Course/BST233/Week14/Kidney_data.dat.csv", header = T)
kidney$gender <- as.factor(ifelse(kidney$gender == 1, "male", "female"))
kidney$race <- as.factor(ifelse(kidney$race == 1, "white", "black"))
kidney$c_age <- scale(kidney$age, center = T, scale = F)
var(kidney$c_age)
mean(kidney$c_age)
kidney <- read.csv("D:/MS/Master Course/BST233/Week14/Kidney_data.dat.csv", header = T)
kidney$gender <- as.factor(ifelse(kidney$gender == 1, "male", "female"))
kidney$race <- as.factor(ifelse(kidney$race == 1, "white", "black"))
kidney$c_age <- as.data.frame(scale(kidney$age, center = T, scale = F))
fitWB <- survreg(Surv(obstime, death) ~ c_age + gender*race, dist="weibull", data=kidney)
fitWB <- survreg(Surv(obstime, death) ~ c_age + gender*race, dist="weibull", data=kidney)
kidney <- read.csv("D:/MS/Master Course/BST233/Week14/Kidney_data.dat.csv", header = T)
kidney$gender <- as.factor(ifelse(kidney$gender == 1, "male", "female"))
kidney$race <- as.factor(ifelse(kidney$race == 1, "white", "black"))
kidney$c_age <- data.frame(scale(kidney$age, center = T, scale = F))
str(kidney$c_age)
kidney <- read.csv("D:/MS/Master Course/BST233/Week14/Kidney_data.dat.csv", header = T)
kidney$gender <- as.factor(ifelse(kidney$gender == 1, "male", "female"))
kidney$race <- as.factor(ifelse(kidney$race == 1, "white", "black"))
kidney$c_age <- as.vector(scale(kidney$age, center = T, scale = F))
str(kidney$c_age)
fitWB <- survreg(Surv(obstime, death) ~ c_age + gender*race, dist="weibull", data=kidney)
summary(fitWB)
fitWB <- survreg(Surv(obstime, death) ~ c_age + gender*race, dist="weibull", data=kidney)
summary(fitWB)
fitWB <- survreg(Surv(obstime, death) ~ c_age + gender*race, dist="weibull", data=kidney)
summary(fitWB)
par(mfrow = c(1, 2))
plot.curve(1, 8, 1, 0.5, F, 1, "Various lambda_2, Lambda(t)")
plot.curve(1, 4, 1, 0.5, T, 2)
plot.curve(1, 2, 1, 0.5, T, 3)
legend("topright", legend=c("lambda_1 = 8", "lambda_1 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
plot.curve(2, 8, 1, 0.5, F, 1, "Various lambda_2, S(t)")
plot.curve(2, 4, 1, 0.5, T, 2)
plot.curve(2, 2, 1, 0.5, T, 3)
legend("topright", legend=c("lambda_1 = 8", "lambda_1 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
plot.curve(3, 8, 1, 0.5, F, 1, "Various lambda_2, f(t)")
plot.curve(3, 4, 1, 0.5, T, 2)
plot.curve(3, 2, 1, 0.5, T, 3)
legend("topright", legend=c("lambda_1 = 8", "lambda_1 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
par(mfrow = c(1, 2))
plot.curve(1, 1, 8, 0.5, F, 1, "Various lambda_2, Lambda(t)")
plot.curve(1, 1, 4, 0.5, T, 2)
plot.curve(1, 1, 2, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 8", "lambda_2 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
plot.curve(2, 1, 8, 0.5, F, 1, "Various lambda_2, S(t)")
plot.curve(2, 1, 4, 0.5, T, 2)
plot.curve(2, 1, 2, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 8", "lambda_2 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
plot.curve(3, 1, 8, 0.5, F, 1, "Various lambda_2, f(t)")
plot.curve(3, 1, 4, 0.5, T, 2)
plot.curve(3, 1, 2, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 8", "lambda_2 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
par(mfrow = c(1, 2))
plot.curve(1, 1, 8, 0.5, F, 1, "Various lambda_2, Lambda(t)")
plot.curve(1, 1, 4, 0.5, T, 2)
plot.curve(1, 1, 2, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 8", "lambda_2 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
plot.curve(2, 1, 8, 0.5, F, 1, "Various lambda_2, S(t)")
plot.curve(2, 1, 4, 0.5, T, 2)
plot.curve(2, 1, 2, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 8", "lambda_2 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
plot.curve(3, 1, 8, 0.5, F, 1, "Various lambda_2, f(t)")
plot.curve(3, 1, 4, 0.5, T, 2)
plot.curve(3, 1, 2, 0.5, T, 3)
legend("topright", legend=c("lambda_2 = 8", "lambda_2 = 4", "lambda_1 = 2"), col=1:3, lwd=2)
par(mfrow = c(1, 2))
plot.curve(1, 2, 4, 0.5, F, 1, "Various lambda_1, Lambda(t)")
plot.curve(1, 1, 4, 0.5, T, 2)
plot.curve(1, 0.5, 4, 0.5, T, 3)
legend("topright", legend=c("lambda_1 = 2", "lambda_1 = 1", "lambda_1 = 0.5"), col=1:3, lwd=2)
plot.curve(2, 2, 4, 0.5, F, 1, "Various lambda_2, S(t)")
plot.curve(2, 1, 4, 0.5, T, 2)
plot.curve(2, 0.5, 4, 0.5, T, 3)
legend("topright", legend=c("lambda_1 = 2", "lambda_1 = 1", "lambda_1 = 0.5"), col=1:3, lwd=2)
plot.curve(3, 2, 4, 0.5, F, 1, "Various lambda_2, f(t)")
plot.curve(3, 1, 4, 0.5, T, 2)
plot.curve(3, 0.5, 4, 0.5, T, 3)
legend("topright", legend=c("lambda_1 = 2", "lambda_1 = 1", "lambda_1 = 0.5"), col=1:3, lwd=2)
fitWB <- survreg(Surv(obstime, death) ~ c_age + gender*race, dist="weibull", data=kidney)
summary(fitWB)
fitWB <- survreg(Surv(obstime, death) ~ c_age + gender*race, dist="weibull", data=kidney)
summary(fitWB)
exp(9.4316)*gamma(2.48)
exp( 0.7223)
exp(0.6842)
exp(-0.8683)
exp(0.7223+ 0.6842 0.6842)
exp(0.7223+ 0.6842- 0.6842)
exp(0.7223+ 0.6842- 0.8683)
1/1.71
library(gplots)
library(edgeR)
library(limma)
library(Glimma)
library(org.Mm.eg.db)
library(RColorBrewer)
library(DESeq2)
library(DEFormats)
write.table(DEgene_list, file = "DEgene_list.tsv", row.names = FALSE, sep = '\t', col.names = F, quote=F)
setwd("C:/Users/songdongyuan/group02_final_project_packet")
filtered <- read.csv("filtered.tsv", sep = "\t", row.names = 1, header= TRUE, stringsAsFactors = F)
filtered <- filtered[, c(4,2,6, 3,1,5)]
group <- c("Co", "Co", "Co", "Mono", "Mono", "Mono")
names(filtered) <- c("MM_HS5", "RPMI_HS5", "KMS11_HS5", "MM", "RPMI", "KMS11")
filtered_counts <- DGEList(filtered, group = group)
filtered_counts$samples$lib.size
barplot(filtered_counts$samples$lib.size,names=colnames(filtered_counts),las=2)
# Add a title to the plot
title("Barplot of library sizes")
# Get log2 counts per million
logcounts <- cpm(filtered_counts,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# MA plot
par(mfrow = c(2,3))
maPlot(filtered_counts$counts[,1], filtered_counts$counts[,2], lowess = T)
title("MA plot (unnormalised) of #1 & #2")
title("MA plot (unnormalised) of #1 & #3")
maPlot(filtered_counts$counts[,1], filtered_counts$counts[,3], lowess = T)
maPlot(filtered_counts$counts[,2], filtered_counts$counts[,3], lowess = T)
title("MA plot (unnormalised) of #2 & #3")
maPlot(filtered_counts$counts[,4], filtered_counts$counts[,5], lowess = T)
title("MA plot (unnormalised) of #4 & #5")
maPlot(filtered_counts$counts[,4], filtered_counts$counts[,6], lowess = T)
title("MA plot (unnormalised) of #4 & #6")
maPlot(filtered_counts$counts[,5], filtered_counts$counts[,6], lowess = T)
title("MA plot (unnormalised) of #5 & #6")
# Apply normalisation to DGEList object
filtered_counts_n <- calcNormFactors(filtered_counts, method = "TMM")
par(mfrow = c(2,3))
maPlot(filtered_counts_n$counts[,1], filtered_counts_n$counts[,2], lowess = T)
title("MA plot (normalised with TMM) of #1 & #2")
maPlot(filtered_counts_n$counts[,1], filtered_counts_n$counts[,3], lowess = T)
title("MA plot (normalised with TMM) of #1 & #3")
maPlot(filtered_counts_n$counts[,2], filtered_counts_n$counts[,3], lowess = T)
title("MA plot (normalised with TMM) of #2 & #3")
title("MA plot (normalised with TMM) of #4 & #5")
maPlot(filtered_counts_n$counts[,4], filtered_counts_n$counts[,6], lowess = T)
maPlot(filtered_counts_n$counts[,4], filtered_counts_n$counts[,5], lowess = T)
title("MA plot (normalised with TMM) of #4 & #6")
maPlot(filtered_counts_n$counts[,5], filtered_counts_n$counts[,6], lowess = T)
title("MA plot (normalised with TMM) of #5 & #6")
par(mfrow = c(1, 2))
# Get log2 counts per million
logcounts <- cpm(filtered_counts,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Get log2 counts per million
logcounts <- cpm(filtered_counts_n,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (TMM normalised)")
# Create design matrix
design <- model.matrix(~ 0 + group)
# Fit limma
logCPM <- cpm(filtered_counts_n, log=TRUE, prior.count=1)
fit <- lmFit(logCPM, design)
fit <- eBayes(fit, trend=TRUE)
filtered_counts_n$counts <- round(filtered_counts_n$counts)
# You can easily convert data format between edgeR and DESeq2
dds <- as.DESeqDataSet(filtered_counts_n)
res <- DESeq(dds)
res <- results(res)
summary(res)
resSig <- res[ which(res$padj < 0.1 ), ]
DEgene_list <- rownames(resSig)
write.table(DEgene_list, file = "DEgene_list.tsv", row.names = FALSE, sep = '\t', col.names = F, quote=F)
filtered <- read.csv("filtered.tsv", sep = "\t", row.names = 1, header= TRUE, stringsAsFactors = F)
View(filtered)
filtered <- filtered[, c(3,1,5, 4,2,6)]
group <- c("Mono", "Mono", "Mono", "Co", "Co", "Co")
names(filtered) <- c("MM", "RPMI", "KMS11", "MM_HS5", "RPMI_HS5", "KMS11_HS5")
filtered_counts <- DGEList(filtered, group = group)
# Apply normalisation to DGEList object
filtered_counts_n <- calcNormFactors(filtered_counts, method = "TMM")
# You can easily convert data format between edgeR and DESeq2
dds <- as.DESeqDataSet(filtered_counts_n)
res <- DESeq(dds)
res <- results(res)
summary(res)
filtered_counts_n$counts <- round(filtered_counts_n$counts)
# You can easily convert data format between edgeR and DESeq2
dds <- as.DESeqDataSet(filtered_counts_n)
res <- DESeq(dds)
res <- results(res)
summary(res)
filtered <- read.csv("filtered.tsv", sep = "\t", row.names = 1, header= TRUE, stringsAsFactors = F)
filtered <- filtered[, c(4,2,6, 3,1,5)]
group <- c("Mono", "Mono", "Mono", "Co", "Co", "Co")
names(filtered) <- c("MM", "RPMI", "KMS11", "MM_HS5", "RPMI_HS5", "KMS11_HS5")
filtered_counts <- DGEList(filtered, group = group)
# Apply normalisation to DGEList object
filtered_counts_n <- calcNormFactors(filtered_counts, method = "TMM")
filtered_counts_n$counts <- round(filtered_counts_n$counts)
# You can easily convert data format between edgeR and DESeq2
dds <- as.DESeqDataSet(filtered_counts_n)
res <- DESeq(dds)
res <- results(res)
summary(res)
str(summary(res))
suppressMessages()
filtered <- read.csv("filtered.tsv", sep = "\t", row.names = 1, header= TRUE, stringsAsFactors = F)
filtered <- filtered[, c(4,2,6, 3,1,5)]
group <- c( "Co", "Co", "Co", "Mono", "Mono", "Mono")
names(filtered) <- c("MM_HS5", "RPMI_HS5", "KMS11_HS5", "MM", "RPMI", "KMS11")
filtered_counts <- DGEList(filtered, group = group)
#filtered_counts$samples$lib.size
barplot(filtered_counts$samples$lib.size,names=colnames(filtered_counts),las=2)
# Add a title to the plot
title("Barplot of library sizes")
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# Get log2 counts per million
logcounts <- cpm(filtered_counts,log=TRUE)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# MA plot
par(mfrow = c(2,3))
maPlot(filtered_counts$counts[,1], filtered_counts$counts[,2], lowess = T)
title("MA plot (unnormalised) of #1 & #2")
maPlot(filtered_counts$counts[,1], filtered_counts$counts[,3], lowess = T)
maPlot(filtered_counts$counts[,2], filtered_counts$counts[,3], lowess = T)
title("MA plot (unnormalised) of #1 & #3")
title("MA plot (unnormalised) of #2 & #3")
maPlot(filtered_counts$counts[,4], filtered_counts$counts[,5], lowess = T)
title("MA plot (unnormalised) of #4 & #5")
maPlot(filtered_counts$counts[,4], filtered_counts$counts[,6], lowess = T)
title("MA plot (unnormalised) of #4 & #6")
maPlot(filtered_counts$counts[,5], filtered_counts$counts[,6], lowess = T)
title("MA plot (unnormalised) of #5 & #6")
# Apply normalisation to DGEList object
filtered_counts_n <- calcNormFactors(filtered_counts, method = "TMM")
par(mfrow = c(2,3))
title("MA plot (normalised with TMM) of #1 & #2")
maPlot(filtered_counts_n$counts[,1], filtered_counts_n$counts[,2], lowess = T)
maPlot(filtered_counts_n$counts[,1], filtered_counts_n$counts[,3], lowess = T)
title("MA plot (normalised with TMM) of #1 & #3")
maPlot(filtered_counts_n$counts[,2], filtered_counts_n$counts[,3], lowess = T)
title("MA plot (normalised with TMM) of #2 & #3")
maPlot(filtered_counts_n$counts[,4], filtered_counts_n$counts[,5], lowess = T)
title("MA plot (normalised with TMM) of #4 & #5")
maPlot(filtered_counts_n$counts[,4], filtered_counts_n$counts[,6], lowess = T)
title("MA plot (normalised with TMM) of #4 & #6")
maPlot(filtered_counts_n$counts[,5], filtered_counts_n$counts[,6], lowess = T)
title("MA plot (normalised with TMM) of #5 & #6")
par(mfrow = c(1, 2))
# Get log2 counts per million
logcounts <- cpm(filtered_counts,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Get log2 counts per million
logcounts <- cpm(filtered_counts_n,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (TMM normalised)")
# Create design matrix
design <- model.matrix(~ 0 + group)
fit <- lmFit(logCPM, design)
# Fit limma
logCPM <- cpm(filtered_counts_n, log=TRUE, prior.count=1)
fit <- eBayes(fit, trend=TRUE)
filtered_counts_n$counts <- round(filtered_counts_n$counts)
# You can easily convert data format between edgeR and DESeq2
dds <- as.DESeqDataSet(filtered_counts_n)
res <- DESeq(dds)
res <- results(res)
summary(res)
#biocLite("edgeR")
#biocLite("limma")
#biocLite("Glimma")
#biocLite("org.Mm.eg.db")
#biocLite("RColorBrewer")
#biocLite("DESeq2")
#biocLite("DEFormats")
#install.packages("gplots")
rm()
setwd("C:/Users/songdongyuan/group02_final_project_packet")
#biocLite("edgeR")
#biocLite("limma")
#biocLite("Glimma")
#biocLite("org.Mm.eg.db")
#biocLite("RColorBrewer")
#biocLite("DESeq2")
#biocLite("DEFormats")
#install.packages("gplots")
rm(list=ls())
suppressMessages(library(gplots))
suppressMessages(library(edgeR))
suppressMessages(library(limma))
suppressMessages(library(Glimma))
suppressMessages(library(org.Mm.eg.db))
suppressMessages(library(RColorBrewer))
suppressMessages(library(DESeq2))
suppressMessages(library(DEFormats))
filtered <- read.csv("filtered.tsv", sep = "\t", row.names = 1, header= TRUE, stringsAsFactors = F)
filtered <- filtered[, c(4,2,6, 3,1,5)]
group <- c( "Co", "Co", "Co", "Mono", "Mono", "Mono")
filtered <- read.csv("filtered.tsv", sep = "\t", row.names = 1, header= TRUE, stringsAsFactors = F)
View(filtered)
filtered <- read.csv("filtered.tsv", sep = "\t", row.names = 1, header= TRUE, stringsAsFactors = F)
filtered <- filtered[, c(3,1,5, 4,2,6)]
group <- c( "Co", "Co", "Co", "Mono", "Mono", "Mono")
names(filtered) <- c("MM_HS5", "RPMI_HS5", "KMS11_HS5", "MM", "RPMI", "KMS11")
filtered_counts <- DGEList(filtered, group = group)
# Apply normalisation to DGEList object
filtered_counts_n <- calcNormFactors(filtered_counts, method = "TMM")
filtered_counts_n$counts <- round(filtered_counts_n$counts)
# You can easily convert data format between edgeR and DESeq2
dds <- as.DESeqDataSet(filtered_counts_n)
res <- DESeq(dds)
res <- results(res)
summary(res)
