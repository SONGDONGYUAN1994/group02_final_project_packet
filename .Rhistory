fit.poly
lin.pred   <- predict(fit.linear, newdata = Carseats[test, ])
lin.err <- mean(lin.pred != Carseats$Urban[test])
print("Err rate of SVM with linear kernal")
lin.err
poly.pred   <- predict(fit.poly, newdata = Carseats[test, ])
poly.err <- mean(poly.pred != Carseats$Urban[test])
print("Err rate of SVM with polynomial kernal")
poly.err
radial.pred   <- predict(fit.radial, newdata = Carseats[test, ])
radial.err <- mean(radial.pred != Carseats$Urban[test])
print("Err rate of SVM with radial kernal")
radial.err
library (ROCR )
rocplot = function (pred, truth, ...){
predob = prediction(pred, truth )
perf = performance(predob , "tpr", "fpr")
plot (perf,...) }
fitted1 = attributes ( predict (fit.linear ,Carseats[-train ,], decision.values =T)) $decision.values
fitted2 = attributes ( predict (fit.poly ,Carseats[-train ,], decision.values =T)) $decision.values
fitted3 = attributes ( predict (fit.radial ,Carseats[-train ,], decision.values =T)) $decision.values
rocplot(fitted1 ,Carseats[-train ,"Urban"], main =" Test Data ")
rocplot(fitted2 ,Carseats[-train ,"Urban"], add = T, col = 2)
rocplot(fitted3 ,Carseats[-train ,"Urban"], add = T, col = 3)
legend("bottomright", legend=c("linear", "polynomial", "radial"), col=1:3, lwd=2)
set.seed(123)
train <- sample(dim(Carseats)[1], 3*dim(Carseats)[1]/4)
test <- -train
set.seed(1234)
fit.linear <- best.tune(svm, Urban ~ ., data = Carseats[train, ], kernel = "linear", ranges = list(cost = c(0.01,
0.1, 1, 5, 10, 100)))
fit.poly <- best.tune(svm, Urban ~ ., data = Carseats[train, ], kernel = "polynomial", ranges = list(cost = c(0.1,
1, 5, 10, 100), gamma = c(0.01, 0.1, 1, 5, 10, 100)))
fit.radial <- best.tune(svm, Urban ~ ., data = Carseats[train, ], kernel = "radial", ranges = list(cost = c(0.1,
1, 5, 10, 100), gamma = c(0.01, 0.1, 1, 5, 10, 100)))
fit.linear
fit.radial
fit.poly
lin.pred   <- predict(fit.linear, newdata = Carseats[test, ])
lin.err <- mean(lin.pred != Carseats$Urban[test])
print("Err rate of SVM with linear kernal")
lin.err
poly.pred   <- predict(fit.poly, newdata = Carseats[test, ])
poly.err <- mean(poly.pred != Carseats$Urban[test])
print("Err rate of SVM with polynomial kernal")
poly.err
radial.pred   <- predict(fit.radial, newdata = Carseats[test, ])
radial.err <- mean(radial.pred != Carseats$Urban[test])
print("Err rate of SVM with radial kernal")
radial.err
library (ROCR )
rocplot = function (pred, truth, ...){
predob = prediction(pred, truth )
perf = performance(predob , "tpr", "fpr")
plot (perf,...) }
fitted1 = attributes ( predict (fit.linear ,Carseats[-train ,], decision.values =T)) $decision.values
fitted2 = attributes ( predict (fit.poly ,Carseats[-train ,], decision.values =T)) $decision.values
fitted3 = attributes ( predict (fit.radial ,Carseats[-train ,], decision.values =T)) $decision.values
rocplot(fitted1 ,Carseats[-train ,"Urban"], main =" Test Data ")
rocplot(fitted2 ,Carseats[-train ,"Urban"], add = T, col = 2)
rocplot(fitted3 ,Carseats[-train ,"Urban"], add = T, col = 3)
legend("bottomright", legend=c("linear", "polynomial", "radial"), col=1:3, lwd=2)
fitted1 = attributes ( predict (fit.linear ,Carseats[-train ,], decision.values =T)) $decision.values
fitted2 = attributes ( predict (fit.poly ,Carseats[-train ,], decision.values =T)) $decision.values
fitted3 = attributes ( predict (fit.radial ,Carseats[-train ,], decision.values =T)) $decision.values
rocplot(fitted1 ,Carseats[-train ,"Urban"], main =" Test Data ")
rocplot(fitted2 ,Carseats[-train ,"Urban"], add = T, col = 2)
rocplot(fitted3 ,Carseats[-train ,"Urban"], add = T, col = 3)
legend("bottomright", legend=c("linear", "polynomial", "radial"), col=1:3, lwd=2)
library (ROCR )
rocplot = function (pred, truth, ...){
predob = prediction(pred, truth )
perf = performance(predob , "tpr", "fpr")
plot (perf,...) }
radial.pred   <- predict(fit.radial, newdata = Carseats[test, ])
radial.err <- mean(radial.pred != Carseats$Urban[test])
print("Err rate of SVM with radial kernal")
radial.err
poly.pred   <- predict(fit.poly, newdata = Carseats[test, ])
poly.err <- mean(poly.pred != Carseats$Urban[test])
print("Err rate of SVM with polynomial kernal")
poly.err
lin.pred   <- predict(fit.linear, newdata = Carseats[test, ])
lin.err <- mean(lin.pred != Carseats$Urban[test])
print("Err rate of SVM with linear kernal")
lin.err
set.seed(1234)
gird <- seq(10^-3, 10^2, length.out = 100)
fit.linear <- best.tune(svm, Urban ~ ., data = Carseats[train, ], kernel = "linear", ranges = list(cost = gird))
fit.poly <- best.tune(svm, Urban ~ ., data = Carseats[train, ], kernel = "polynomial", ranges = list(cost = gird, gamma = gird))
View(Carseats)
set.seed(1234)
gird <- seq(10^-3, 10^2, by = 10)
fit.linear <- best.tune(svm, Urban ~ ., data = Carseats[train, ], kernel = "linear", ranges = list(cost = c(0.01,
0.1, 1, 5, 10, 100)))
fit.poly <- best.tune(svm, Urban ~ ., data = Carseats[train, ], kernel = "polynomial", ranges = list(cost = c(0.1,
1, 5, 10, 100), gamma = c(0.01, 0.1, 1, 5, 10, 100)))
fit.radial <- best.tune(svm, Urban ~ ., data = Carseats[train, ], kernel = "radial", ranges = list(cost = c(0.1,
1, 5, 10, 100), gamma = c(0.01, 0.1, 1, 5, 10, 100)))
summary(Carseats)
set.seed(1234)
gird <- seq(10^-3, 10^2, by = 10)
fit.linear <- best.tune(svm, US ~ ., data = Carseats[train, ], kernel = "linear", ranges = list(cost = c(0.01,
0.1, 1, 5, 10, 100)))
fit.poly <- best.tune(svm, US ~ ., data = Carseats[train, ], kernel = "polynomial", ranges = list(cost = c(0.1,
1, 5, 10, 100), gamma = c(0.01, 0.1, 1, 5, 10, 100)))
fit.radial <- best.tune(svm, US ~ ., data = Carseats[train, ], kernel = "radial", ranges = list(cost = c(0.1,
1, 5, 10, 100), gamma = c(0.01, 0.1, 1, 5, 10, 100)))
lin.pred   <- predict(fit.linear, newdata = Carseats[test, ])
lin.err <- mean(lin.pred != Carseats$Urban[test])
print("Err rate of SVM with linear kernal")
lin.err
poly.pred   <- predict(fit.poly, newdata = Carseats[test, ])
poly.err <- mean(poly.pred != Carseats$Urban[test])
print("Err rate of SVM with polynomial kernal")
poly.err
radial.pred   <- predict(fit.radial, newdata = Carseats[test, ])
radial.err <- mean(radial.pred != Carseats$Urban[test])
print("Err rate of SVM with radial kernal")
radial.err
fitted1 = attributes ( predict (fit.linear ,Carseats[-train ,], decision.values =T)) $decision.values
fitted2 = attributes ( predict (fit.poly ,Carseats[-train ,], decision.values =T)) $decision.values
fitted3 = attributes ( predict (fit.radial ,Carseats[-train ,], decision.values =T)) $decision.values
rocplot(fitted1 ,Carseats[-train ,"Urban"], main =" Test Data ")
rocplot(fitted2 ,Carseats[-train ,"Urban"], add = T, col = 2)
rocplot(fitted3 ,Carseats[-train ,"Urban"], add = T, col = 3)
legend("bottomright", legend=c("linear", "polynomial", "radial"), col=1:3, lwd=2)
fit.linear
fit.radial
fit.poly
lin.pred   <- predict(fit.linear, newdata = Carseats[test, ])
lin.err <- mean(lin.pred != Carseats$Urban[test])
print("Err rate of SVM with linear kernal")
lin.err
fitted1 = attributes ( predict (fit.linear ,Carseats[-train ,], decision.values =T)) $decision.values
fitted2 = attributes ( predict (fit.poly ,Carseats[-train ,], decision.values =T)) $decision.values
fitted3 = attributes ( predict (fit.radial ,Carseats[-train ,], decision.values =T)) $decision.values
rocplot(fitted1 ,Carseats[-train ,"Urban"], main =" Test Data ")
rocplot(fitted2 ,Carseats[-train ,"Urban"], add = T, col = 2)
rocplot(fitted3 ,Carseats[-train ,"Urban"], add = T, col = 3)
legend("bottomright", legend=c("linear", "polynomial", "radial"), col=1:3, lwd=2)
set.seed(1234)
gird <- seq(10^-3, 10^2, by = 10)
fit.linear <- best.tune(svm, US ~ ., data = Carseats[train, ], kernel = "linear", ranges = list(cost = c(0.01,
0.1, 1, 2, 3, 4, 5, 10, 100)))
fit.poly <- best.tune(svm, US ~ ., data = Carseats[train, ], kernel = "polynomial", ranges = list(cost = c(0.1,
1, 5, 10, 100), gamma = c(0.01, 0.1, 1, 5, 10, 100)))
fit.radial <- best.tune(svm, US ~ ., data = Carseats[train, ], kernel = "radial", ranges = list(cost = c(0.1,
1, 5, 10, 100), gamma = c(0.01, 0.1, 1, 5, 10, 100)))
fit.linear
fit.radial
fit.poly
lin.pred   <- predict(fit.linear, newdata = Carseats[test, ])
lin.err <- mean(lin.pred != Carseats$Urban[test])
print("Err rate of SVM with linear kernal")
lin.err
poly.pred   <- predict(fit.poly, newdata = Carseats[test, ])
poly.err <- mean(poly.pred != Carseats$Urban[test])
print("Err rate of SVM with polynomial kernal")
poly.err
fitted1 = attributes ( predict (fit.linear ,Carseats[-train ,], decision.values =T)) $decision.values
fitted2 = attributes ( predict (fit.poly ,Carseats[-train ,], decision.values =T)) $decision.values
fitted3 = attributes ( predict (fit.radial ,Carseats[-train ,], decision.values =T)) $decision.values
rocplot(fitted1 ,Carseats[-train ,"Urban"], main =" Test Data ")
rocplot(fitted2 ,Carseats[-train ,"Urban"], add = T, col = 2)
rocplot(fitted3 ,Carseats[-train ,"Urban"], add = T, col = 3)
legend("bottomright", legend=c("linear", "polynomial", "radial"), col=1:3, lwd=2)
summary(Carseats$US)
258/400
str(Carseats)
par(pty="s")
x1 <- c(3, 2, 4, 1, 2, 4, 4)
x2 <- c(4, 2, 4, 4, 1, 3, 1)
color <- c("red", "red", "red", "red", "blue", "blue", "blue")
plot(x1, x2, pch = 19, col = color, xlim = c(0, 5), ylim = c(0, 5), main = "Observation Sketch")
pairplots <- function(fit, ...) {
print(fit$call)
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
#par(mfrow = c(1,2))
plot(fit, Auto, as.formula(paste("mpg ~", name, sep = "")), ...)
}
}
pairplots(svm.linear, main = "SVM linear kernal")
pairplots <- function(fit, ...) {
print(fit$call)
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
#par(mfrow = c(1,2))
plot(fit, Auto, as.formula(paste("mpg ~", name, sep = "")), ...)
}
}
pairplots(svm.linear, main = "SVM linear kernal")
pairplots <- function(fit, ...) {
print(fit$call)
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
#par(mfrow = c(1,2))
plot(fit, Auto, as.formula(paste("mpg ~", name, sep = "")), ...)
}
}
pairplots(svm.linear, main = "SVM linear kernal")
exp(-0.379045)
exp(-0.379045-1.96*0.030291)
exp(-0.379045+1.96*0.030291)
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
setwd("C:/Users/songdongyuan/group02_final_project_packet")
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
raw <- filtered[, c(3,1,5, 4,2,6)]
raw <- raw[, c(3,1,5, 4,2,6)]
group <- c( "Mono", "Mono", "Mono", "Co", "Co", "Co")
names(raw) <- c("MM", "RPMI", "KMS11", "MM_HS5", "RPMI_HS5", "KMS11_HS5")
group <- c( "Mono", "Mono", "Mono", "Co", "Co", "Co")
names(raw) <- c("MM", "RPMI", "KMS11", "MM_HS5", "RPMI_HS5", "KMS11_HS5")
raw_counts <- DGEList(raw, group = group, samples = c("MM", "RPMI", "KMS11", "MM", "RPMI", "KMS11") )
suppressMessages(library(gplots))
suppressMessages(library(edgeR))
suppressMessages(library(limma))
suppressMessages(library(Glimma))
suppressMessages(library(org.Mm.eg.db))
suppressMessages(library(RColorBrewer))
suppressMessages(library(DESeq2))
suppressMessages(library(DEFormats))
raw_counts <- DGEList(raw, group = group, samples = c("MM", "RPMI", "KMS11", "MM", "RPMI", "KMS11") )
dds <- as.DESeqDataSet(raw_counts)
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
raw <- round(raw[, c(3,1,5, 4,2,6)])
group <- c( "Mono", "Mono", "Mono", "Co", "Co", "Co")
names(raw) <- c("MM", "RPMI", "KMS11", "MM_HS5", "RPMI_HS5", "KMS11_HS5")
raw_counts <- DGEList(raw, group = group, samples = c("MM", "RPMI", "KMS11", "MM", "RPMI", "KMS11") )
dds <- as.DESeqDataSet(raw_counts)
res <- DESeq(dds)
summary(res)
res
res <- DESeq(dds)
summary(res)
View(raw)
res <- results(res)
summary(res)
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
raw <- round(raw[, c(4,2,6, 3,1,5)])
group <- c("Co", "Co", "Co",  "Mono", "Mono", "Mono")
names(raw) <- c("MM", "RPMI", "KMS11", "MM_HS5", "RPMI_HS5", "KMS11_HS5")
raw_counts <- DGEList(raw, group = group, samples = c("MM", "RPMI", "KMS11", "MM", "RPMI", "KMS11") )
dds <- as.DESeqDataSet(raw_counts)
res <- DESeq(dds)
res <- results(res)
summary(res)
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
raw <- round(raw[, c(3,1,5, 4,2,6)])
group <- c( "Mono", "Mono", "Mono", "Co", "Co", "Co")
names(raw) <- c("MM", "RPMI", "KMS11", "MM_HS5", "RPMI_HS5", "KMS11_HS5")
raw_counts <- DGEList(raw, group = group, samples = c("MM", "RPMI", "KMS11", "MM", "RPMI", "KMS11") )
dds <- as.DESeqDataSet(raw_counts)
res <- DESeq(dds)
res <- results(res)
summary(res)
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
colnames(NormCountTable) <- c("RPMI", "RPMI(+HS5)", "MM1S", "MM1S(+HS5)", "KMS11", "KMS11(+HS5)")
colnames(raw) <- c("RPMI", "RPMI(+HS5)", "MM1S", "MM1S(+HS5)", "KMS11", "KMS11(+HS5)")
pheatmap(cor(raw))
suppressMessages(library(RColorBrewer))
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
colnames(raw) <- c("RPMI", "RPMI(+HS5)", "MM1S", "MM1S(+HS5)", "KMS11", "KMS11(+HS5)")
pheatmap(cor(raw))
pheatmap::pheatmap(cor(raw))
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists)
pheatmap::pheatmap()
DEgene_list
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
colnames(raw) <- c("RPMI", "RPMI(+HS5)", "MM1S", "MM1S(+HS5)", "KMS11", "KMS11(+HS5)")
png("heatmap2.png")
pheatmap::pheatmap(cor(raw))
dev.off()
group <- c( "Mono", "Mono", "Mono", "Co", "Co", "Co")
names(raw) <- c("MM", "RPMI", "KMS11", "MM_HS5", "RPMI_HS5", "KMS11_HS5")
raw_counts <- DGEList(raw, group = group, samples = c("MM", "RPMI", "KMS11", "MM", "RPMI", "KMS11") )
dds <- as.DESeqDataSet(raw_counts)
raw <- round(raw[, c(3,1,5, 4,2,6)])
res <- DESeq(dds)
res <- results(res)
summary(res)
resSig <- res[ which(res$padj < 0.1 ), ]
DEgene_list <- rownames(resSig)
raw_count <raw[row.names(raw) %in% DEgene_lists,]
raw_count <- raw[row.names(raw) %in% DEgene_lists,]
raw_count <- raw[row.names(raw) %in% DEgene_list,]
png("heatmap3.png")
pheatmap::pheatmap(cor(raw_count))
pheatmap::pheatmap(cor(raw_count))
raw_count
cor(raw_count)
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
View(raw)
raw <- round(raw[, c(3,1,5, 4,2,6)])
group <- c( "Mono", "Mono", "Mono", "Co", "Co", "Co")
names(raw) <- c("MM", "RPMI", "KMS11", "MM_HS5", "RPMI_HS5", "KMS11_HS5")
View(raw)
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
View(raw)
raw_counts <- DGEList(raw, group = group, samples = c("MM", "RPMI", "KMS11", "MM", "RPMI", "KMS11") )
View(raw_count)
View(raw_count)
View(raw)
View(raw_count)
View(raw)
raw <- round(raw[, c(3,1,5, 4,2,6)])
group <- c( "Mono", "Mono", "Mono", "Co", "Co", "Co")
names(raw) <- c("MM", "RPMI", "KMS11", "MM_HS5", "RPMI_HS5", "KMS11_HS5")
raw_counts <- DGEList(raw, group = group, samples = c("MM", "RPMI", "KMS11", "MM", "RPMI", "KMS11") )
dds <- as.DESeqDataSet(raw_counts)
res <- DESeq(dds)
res <- results(res)
summary(res)
resSig <- res[ which(res$padj < 0.1 ), ]
DEgene_list <- rownames(resSig)
write.table(DEgene_list_auto, file = "DEgene_list_auto.tsv", row.names = FALSE, sep = '\t', col.names = F, quote=F)
setwd("C:/Users/songdongyuan/group02_final_project_packet")
write.table(DEgene_list_auto, file = "DEgene_list_auto.tsv", row.names = FALSE, sep = '\t', col.names = F, quote=F)
DEgene_list_auto <- rownames(resSig)
write.table(DEgene_list_auto, file = "DEgene_list_auto.tsv", row.names = FALSE, sep = '\t', col.names = F, quote=F)
raw_count <- raw_counts[row.names(raw) %in% DEgene_list_auto,]
View(raw_count)
png("heatmap3.png")
pheatmap::pheatmap(cor(raw_count))
raw_count <- raw[row.names(raw) %in% DEgene_list_auto,]
png("heatmap3.png")
pheatmap::pheatmap(cor(raw_count))
dev.off()
png("heatmap3.png")
pheatmap::pheatmap(cor(raw_count))
dev.off()
pheatmap(cor(raw_count))
pheatmap::pheatmap(cor(raw_count))
pheatmap::pheatmap(cor(raw_count))
cor(raw_count)
pheatmap::pheatmap(cor(raw_count))
pheatmap::pheatmap(cor(raw))
dev.off()
suppressMessages(library(gplots))
suppressMessages(library(edgeR))
suppressMessages(library(limma))
suppressMessages(library(Glimma))
suppressMessages(library(org.Mm.eg.db))
suppressMessages(library(RColorBrewer))
suppressMessages(library(DESeq2))
suppressMessages(library(DEFormats))
suppressMessages(library(pheatmap))
filtered <- read.csv("filtered.tsv", sep = "\t", row.names = 1, header= TRUE, stringsAsFactors = F)
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
colnames(raw) <- c("RPMI", "RPMI(+HS5)", "MM1S", "MM1S(+HS5)", "KMS11", "KMS11(+HS5)")
png("heatmap2.png")
pheatmap(cor(raw))
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists)
png("heatmap2.png")
pheatmap(cor(raw))
dev.off()
suppressMessages(library(ggplot2))
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
colnames(raw) <- c("RPMI", "RPMI(+HS5)", "MM1S", "MM1S(+HS5)", "KMS11", "KMS11(+HS5)")
png("heatmap2.png")
pheatmap(cor(raw))
dev.off()
pheatmap()
cor(raw)
#png("heatmap2.png")
pheatmap(cor(raw))
####################
# Auto pre-processing
####################
raw <- read.csv("expressionFile_counts_MM.csv", row.names = 1, header= TRUE, stringsAsFactors = F)
colnames(raw) <- c("RPMI", "RPMI(+HS5)", "MM1S", "MM1S(+HS5)", "KMS11", "KMS11(+HS5)")
png("heatmap2.png")
pheatmap(cor(raw))
dev.off()
sampleDistMatrix
filtered <- read.csv("filtered.tsv", sep = "\t", row.names = 1, header= TRUE, stringsAsFactors = F)
filtered <- filtered[, c(3,1,5, 4,2,6)]
group <- c( "Mono", "Mono", "Mono", "Co", "Co", "Co")
names(filtered) <- c("MM", "RPMI", "KMS11", "MM_HS5", "RPMI_HS5", "KMS11_HS5")
filtered_counts <- DGEList(filtered, group = group, samples = c("MM", "RPMI", "KMS11", "MM", "RPMI", "KMS11") )
png("Barplot of library sizes.png")
#filtered_counts$samples$lib.size
barplot(filtered_counts$samples$lib.size,names=colnames(filtered_counts),las=2)
# Add a title to the plot
title("Barplot of library sizes")
dev.off()
# Get log2 counts per million
logcounts <- cpm(filtered_counts,log=TRUE)
png("Boxplots of logCPMs (unnormalised).png")
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
dev.off()
# MA plot
png("MA plot (unnormalised).png")
par(mfrow = c(2,3))
maPlot(filtered_counts$counts[,1], filtered_counts$counts[,2], lowess = T)
title("MA plot (unnormalised) of #1 & #2")
maPlot(filtered_counts$counts[,1], filtered_counts$counts[,3], lowess = T)
title("MA plot (unnormalised) of #1 & #3")
maPlot(filtered_counts$counts[,2], filtered_counts$counts[,3], lowess = T)
title("MA plot (unnormalised) of #2 & #3")
maPlot(filtered_counts$counts[,4], filtered_counts$counts[,5], lowess = T)
title("MA plot (unnormalised) of #4 & #5")
maPlot(filtered_counts$counts[,4], filtered_counts$counts[,6], lowess = T)
title("MA plot (unnormalised) of #4 & #6")
maPlot(filtered_counts$counts[,5], filtered_counts$counts[,6], lowess = T)
title("MA plot (unnormalised) of #5 & #6")
dev.off()
# Apply normalisation to DGEList object
filtered_counts_n <- calcNormFactors(filtered_counts, method = "TMM")
png("MA plot (normalised with TMM).png")
par(mfrow = c(2,3))
maPlot(filtered_counts_n$counts[,1], filtered_counts_n$counts[,2], lowess = T)
title("MA plot (normalised with TMM) of #1 & #2")
maPlot(filtered_counts_n$counts[,1], filtered_counts_n$counts[,3], lowess = T)
title("MA plot (normalised with TMM) of #1 & #3")
maPlot(filtered_counts_n$counts[,2], filtered_counts_n$counts[,3], lowess = T)
title("MA plot (normalised with TMM) of #2 & #3")
maPlot(filtered_counts_n$counts[,4], filtered_counts_n$counts[,5], lowess = T)
title("MA plot (normalised with TMM) of #4 & #5")
maPlot(filtered_counts_n$counts[,4], filtered_counts_n$counts[,6], lowess = T)
maPlot(filtered_counts_n$counts[,5], filtered_counts_n$counts[,6], lowess = T)
title("MA plot (normalised with TMM) of #4 & #6")
title("MA plot (normalised with TMM) of #5 & #6")
dev.off()
png("Boxplots of logCPMs.png")
par(mfrow = c(1, 2))
# Get log2 counts per million
logcounts <- cpm(filtered_counts,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# Get log2 counts per million
logcounts <- cpm(filtered_counts_n,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (TMM normalised)")
dev.off()
# Create design matrix
design <- model.matrix(~ 0 + group)
# Fit limma
logCPM <- cpm(filtered_counts_n, log=TRUE, prior.count=1)
fit <- eBayes(fit, trend=TRUE)
fit <- lmFit(logCPM, design)
filtered_counts_n$counts <- round(filtered_counts_n$counts)
# You can easily convert data format between edgeR and DESeq2
dds <- as.DESeqDataSet(filtered_counts_n)
res <- DESeq(dds)
res <- results(res)
summary(res)
vsd <- vst(dds, blind=FALSE)
filtered_counts_n$counts <- round(filtered_counts_n$counts)
# You can easily convert data format between edgeR and DESeq2
dds <- as.DESeqDataSet(filtered_counts_n)
res <- DESeq(dds)
res <- results(res)
summary(res)
vsd <- vst(dds, blind=FALSE)
png("PCA.png")
plotPCA(vsd, intgroup=c("group", "samples"))
dev.off()
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
View(sampleDistMatrix)
rownames(sampleDistMatrix) <- paste(vsd$samples, vsd$group, sep="-")
colnames(sampleDistMatrix) <- NULL
png("heatmap.png")
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists)
